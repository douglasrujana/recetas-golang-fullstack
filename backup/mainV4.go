// backend/cmd/app/main.go

// Punto de entrada de la aplicaci√≥n.
//
// Este archivo contiene la l√≥gica principal de la aplicaci√≥n, que incluye:
// - Carga de configuraci√≥n
// - Inicializaci√≥n de base de datos
// - Inyecci√≥n de dependencias
// - Configuraci√≥n del router
// - Registro de rutas
// - Arranque del servidor
//
// Nota: Se recomienda mantener este archivo lo m√°s simple posible para facilitar
// la comprensi√≥n y mantenimiento de la aplicaci√≥n.

package main

import (
	"fmt"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"

	// --- Paquetes Compartidos ---
	"backend/shared/config"
	"backend/shared/database"
	"backend/shared/middleware"

	// --- Paquetes de Caracter√≠sticas ---
	"backend/categorias" // Aseg√∫rate de que esta l√≠nea est√© presente y correcta
	"backend/recetas"    // <-- ¬°NUEVO! Importar el paquete de recetas

	// --- Paquetes de Swagger ---
	_ "backend/docs" // <-- ¬°NUEVO! Importar el paquete de docs

	swaggerFiles "github.com/swaggo/files"     // <-- ¬°NUEVO! Importar el paquete de archivos de Swagger
	ginSwagger "github.com/swaggo/gin-swagger" // <-- ¬°NUEVO! Importar el paquete de Swagger para Gin
)

func main() {
	log.Println("üöÄ Iniciando aplicaci√≥n...")

	// --- 1. Carga de Configuraci√≥n ---
	cfg, err := config.LoadConfig("config")
	if err != nil {
		log.Fatalf("‚ùå Error cargando config: %v", err)
	}
	fmt.Println("‚úÖ Configuraci√≥n cargada para entorno:", cfg.AppEnv)

	// --- 2. Inicializaci√≥n de Base de Datos ---
	dbInstance, err := database.ConnectDB(cfg.Database)
	if err != nil {
		log.Fatalf("‚ùå Error inicializando BD (%s): %v", cfg.Database.Name, err)
	}
	log.Printf("‚úÖ Conexi√≥n a base de datos '%s' establecida.\n", cfg.Database.Name)

	// --- 3. AutoMigrate ---
	log.Println("üîß Ejecutando AutoMigrate...")
	err = dbInstance.AutoMigrate(
		&categorias.CategoriaModel{},
		&recetas.RecetaModel{}, // <-- ¬°NUEVO! A√±adir RecetaModel a AutoMigrate
		// &mysql.IngredienteModel{}, // Cuando exista
		// &mysql.UserModel{},        // Cuando exista
	)

	if err != nil {
		log.Fatalf("‚ùå ERROR CR√çTICO durante AutoMigrate: %v", err)
	}
	log.Println("‚úÖ AutoMigrate completado.")

	// --- 4. Inyecci√≥n de Dependencias ---
	log.Println("üèóÔ∏è  Inicializando dependencias...")

	// Categor√≠as (sin cambios)
	categoriaRepo := categorias.NewCategoriaRepository(dbInstance)
	categoriaService := categorias.NewCategoriaService(categoriaRepo)
	categoriaHandler := categorias.NewCategoriaHandler(categoriaService)
	log.Println("   - Dependencias de Categor√≠as inicializadas.")

	// Recetas <-- ¬°NUEVO!
	recetaRepo := recetas.NewRecetaRepository(dbInstance) // Usa constructor del paquete 'recetas'
	// RecetaService necesita CategoriaService para validar CategoriaID
	recetaService := recetas.NewRecetaService(recetaRepo, categoriaService) // Inyectar categoriaService
	recetaHandler := recetas.NewRecetaHandler(recetaService)
	log.Println("   - Dependencias de Recetas inicializadas.")
	log.Println("‚úÖ Todas las dependencias inicializadas.")

	// --- 5. Inicializaci√≥n del Router Gin ---
	if cfg.AppEnv != "production" {
		gin.SetMode(gin.DebugMode)
	} else {
		gin.SetMode(gin.ReleaseMode)
	}

	//router := gin.Default()
	router := gin.New()        // Usar gin.New() para control total
	router.Use(gin.Logger())   // A√±adir logger de Gin
	router.Use(gin.Recovery()) // A√±adir middleware de recuperaci√≥n de panics

	// --- ‚ú® REGISTRAR MIDDLEWARE DE ERRORES GLOBALMENTE ---
	// Debe ir DESPU√âS de Logger y Recovery, pero ANTES de que se definan las rutas
	// para que pueda capturar errores de todos los handlers.
	router.Use(middleware.ErrorHandler())
	log.Printf("‚úÖ Router Gin inicializado en modo: %s.\n", gin.Mode())

	// --- 6. Configuraci√≥n de Rutas ---
	apiV1 := router.Group("/api/v1")

	if categoriaHandler != nil {
		categorias.RegisterCategoriaRoutes(apiV1, categoriaHandler) // Usa el nombre de funci√≥n que definiste en el paquete
	}

	// Recetas <-- ¬°NUEVO!
	if recetaHandler != nil { // <-- ¬°NUEVO!
		recetas.RegisterRoutes(apiV1, recetaHandler) // Usa el nombre de funci√≥n que definiste en el paquete
	}
	log.Println("‚úÖ Todas las rutas de API registradas.")

	// --- ‚ú® ENDPOINT PARA SWAGGER UI ‚ú® ---
	// Aseg√∫rate de que esta l√≠nea est√© presente y sea accesible
	// Se registra en la ra√≠z del router, NO bajo /api/v1
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	log.Println("‚úÖ Swagger UI disponible en /swagger/index.html")
	// -----------------------------------------------------------------------

	// --- Rutas Base / No API (sin cambios) ---
	router.Static("/public", "./public")
	router.Static("/uploads", "./uploads")
	router.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{"error": "Ruta no encontrada"})
	})
	router.GET("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"message": "‚úÖ API Recetas Go Funcionando!",
		})
	})
	log.Println("‚úÖ Rutas adicionales configuradas.")

	// --- 7. Arranque del Servidor (sin cambios) ---
	serverAddr := fmt.Sprintf(":%d", cfg.Server.Port)
	fmt.Printf("üöÄ Servidor escuchando en http://localhost%s\n", serverAddr)
	if err := router.Run(serverAddr); err != nil {
		log.Fatalf("‚ùå Error al iniciar el servidor Gin: %v", err)
	}
}
