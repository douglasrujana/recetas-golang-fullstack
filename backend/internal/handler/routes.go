// backend/internal/handler/routes.go

package handler

import (
	"github.com/gin-gonic/gin"
	// [‚ú® IMPORTANTE] Necesitamos importar los otros archivos dentro de 'handler'
	// para poder referenciar los tipos de los handlers (AuthHandler, CategoriaHandler, etc.)
	// y sus m√©todos. Aseg√∫rate de que los nombres de paquete y archivo sean correctos.

	// [üîµ PENDIENTE] A√∫n necesitamos el middleware de autenticaci√≥n.
	// Lo ideal ser√≠a que tambi√©n fuera un m√©todo de AuthHandler o un struct separado
	// que reciba dependencias (como AuthServicio para validar el token).
	// Por ahora, asumiremos que existe una funci√≥n o m√©todo `authMiddlewareFunc`.
)

// [‚úÖ BUENA PR√ÅCTICA] Agrupar las rutas por recurso/dominio usando Gin Groups.

// RegisterRoutes configura todas las rutas de la API en el router de Gin.
// Recibe el router y las instancias de los handlers necesarios.
// [‚úÖ BUENA PR√ÅCTICA] Dependencias expl√≠citas pasadas como argumentos.
func RegisterRoutes(
	router *gin.Engine,
	authHandler *AuthHandler, // Handler para autenticaci√≥n (register/login)
	categoriaHandler *CategoriaHandler, // Handler para categor√≠as
	recetaHandler *RecetaHandler, // Handler para recetas
	uploadHandler *UploadHandler, // Handler para subida de archivos
	// ...a√±adir otros handlers aqu√≠ si los hubiera ...
) {
	// --- Middleware Global (Si aplica) ---
	// router.Use(middleware.LoggingMiddleware()) // Ejemplo si tuvieras middleware global

	// --- Rutas P√∫blicas ---
	api := router.Group("/api/v1") // [‚úÖ BUENA PR√ÅCTICA] Usar un prefijo base para la API

	// Rutas de Autenticaci√≥n
	authRoutes := api.Group("/auth") // [‚ú® SUGERENCIA] Agrupar auth bajo /auth
	{
		authRoutes.POST("/register", authHandler.Register) // Llama al m√©todo Register del AuthHandler
		authRoutes.POST("/login", authHandler.Login)       // Llama al m√©todo Login del AuthHandler
	}

	// Rutas de Subida (Upload) - Asumiendo p√∫blica por ahora, o necesita auth
	// [‚ùì PREGUNTA] ¬øLa subida requiere autenticaci√≥n? Si s√≠, mover dentro de `apiAuthRequired`.
	api.POST("/upload", uploadHandler.HandleUpload) // Llama al m√©todo del UploadHandler

	// --- Rutas Protegidas por Autenticaci√≥n ---
	apiAuthRequired := api.Group("/") // Grupo para rutas que requieren autenticaci√≥n

	// [üèóÔ∏è MIDDLEWARE] Aqu√≠ aplicamos el middleware de autenticaci√≥n.
	// Necesitas crear este middleware. Podr√≠a ser un m√©todo en AuthHandler
	// o un struct/funci√≥n separada en un paquete `middleware`.
	// Ejemplo: apiAuthRequired.Use(authHandler.AuthMiddleware())
	// Por ahora, usaremos una funci√≥n placeholder:
	apiAuthRequired.Use(placeholderAuthMiddleware()) // ¬°¬°REEMPLAZAR CON TU MIDDLEWARE REAL!!

	// Rutas de Categor√≠as (Protegidas)
	categoriaRoutes := apiAuthRequired.Group("/categorias")
	{
		categoriaRoutes.GET("", categoriaHandler.GetAll)          // GET /api/v1/categorias
		categoriaRoutes.GET("/:id", categoriaHandler.GetByID)     // GET /api/v1/categorias/:id
		categoriaRoutes.POST("", categoriaHandler.Create)         // POST /api/v1/categorias
		categoriaRoutes.PUT("/:id", categoriaHandler.Update)      // PUT /api/v1/categorias/:id
		categoriaRoutes.DELETE("/:id", categoriaHandler.Delete)   // DELETE /api/v1/categorias/:id
	}

	// Rutas de Recetas (Protegidas)
	recetaRoutes := apiAuthRequired.Group("/recetas")
	{
		recetaRoutes.GET("", recetaHandler.GetAll)         // GET /api/v1/recetas
		recetaRoutes.GET("/:id", recetaHandler.GetByID)    // GET /api/v1/recetas/:id
		recetaRoutes.POST("", recetaHandler.Create)        // POST /api/v1/recetas
		// recetaRoutes.PUT("/:id", recetaHandler.Update)   // PUT /api/v1/recetas/:id (Si existe)
		// recetaRoutes.DELETE("/:id", recetaHandler.Delete) // DELETE /api/v1/recetas/:id (Si existe)
	}

	// ... A√±adir otros grupos de rutas protegidas aqu√≠ ...

	log.Println("üõ£Ô∏è Rutas de la API configuradas")
}

// --- Placeholder para el Middleware ---
// [üî¥ TEMPORAL] ¬°¬°DEBES REEMPLAZAR ESTO!!
// Crea tu middleware real, probablemente en `auth_handler.go` o `middleware/auth.go`
// que valide el token JWT y a√±ada la informaci√≥n del usuario al contexto de Gin.
func placeholderAuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		log.Println("‚ö†Ô∏è ADVERTENCIA: Usando Placeholder Auth Middleware. ¬°Implementar validaci√≥n JWT real!")
		// Aqu√≠ ir√≠a la l√≥gica:
		// 1. Extraer token (e.g., "Bearer <token>") del header "Authorization".
		// 2. Validar el token (firma, expiraci√≥n) usando la SECRET_KEY.
		// 3. Si es v√°lido, extraer claims (e.g., user ID).
		// 4. A√±adir claims/user ID al contexto Gin: c.Set("userID", userID)
		// 5. Llamar a c.Next() para pasar al siguiente handler.
		// 6. Si no es v√°lido, llamar a c.AbortWithStatusJSON(http.StatusUnauthorized, ...)
		c.Next() // Por ahora, simplemente deja pasar todo.
	}
}