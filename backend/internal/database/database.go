// backend/internal/database/database.go
package database

import (
	// [‚ú® INYECCI√ìN DE DEPENDENCIA] Importamos espec√≠ficamente la configuraci√≥n de BD
	// que necesitamos, no toda la configuraci√≥n de la app. Menor acoplamiento.
	"backend/internal/config"
	"fmt"
	"log"
	"os" // Necesario para log.New(os.Stdout, ...)
	"time"

	"gorm.io/driver/mysql" // Driver GORM para MySQL
	"gorm.io/gorm"
	"gorm.io/gorm/logger" // Logger de GORM para depuraci√≥n
)

// --- PATRONES DE DISE√ëO UTILIZADOS ---
// 1. FACTORY FUNCTION: ConnectDB act√∫a como una funci√≥n f√°brica. Su responsabilidad
//    es crear y configurar un objeto complejo (*gorm.DB) basado en la configuraci√≥n.
// 2. DEPENDENCY INJECTION (Indirecta): Esta funci√≥n CREA una dependencia (*gorm.DB)
//    que LUEGO ser√° inyectada por main.go en los repositorios.
// 3. CONFIGURATION MANAGEMENT: Dependemos de una estructura de configuraci√≥n (`config.DatabaseConfig`)
//    que es gestionada externamente (por Viper en main.go y el paquete config),
//    separando la configuraci√≥n de la l√≥gica de conexi√≥n.

// ConnectDB encapsula la l√≥gica para establecer la conexi√≥n con la base de datos usando GORM.
// [‚ú® DESACOPLAMIENTO] Recibe SOLAMENTE la configuraci√≥n espec√≠fica de la base de datos (`config.DatabaseConfig`),
// en lugar de toda la `config.Config`.
// Devuelve la instancia de Gorm o un error.
func ConnectDB(cfgDb config.DatabaseConfig) (*gorm.DB, error) {

	// [‚ú® REFACTOR] Usamos el m√©todo DSN() definido en config.DatabaseConfig.
	// Esto centraliza la l√≥gica de construcci√≥n del DSN y sigue el principio DRY (Don't Repeat Yourself).
	dsn := cfgDb.DSN()

	// [‚ö†Ô∏è VALIDACI√ìN] La configuraci√≥n de Viper (puerto, usuario, pass, host, name) debe ser correcta
	// para tu instancia de MySQL. Viper ya deber√≠a haber cargado estos valores desde config.yaml o env vars.
	log.Printf("‚ÑπÔ∏è Intentando conectar a la base de datos: mysql://%s@%s:%d/%s\n", cfgDb.User, cfgDb.Host, cfgDb.Port, cfgDb.Name)
	// [üö® SEGURIDAD] La advertencia sobre contrase√±a vac√≠a se movi√≥ a `config.LoadConfig` donde es m√°s apropiado validarla.

	// --- Configuraci√≥n del Logger de Gorm ---
	// [‚úÖ BUENA PR√ÅCTICA] Logger configurable para ver SQL, √∫til en desarrollo/debug.
	logLevel := logger.Silent // Por defecto, no mostrar logs de GORM en producci√≥n
	isDevelopment := os.Getenv("APP_ENV") != "production" // O usa cfg.AppEnv si lo pasas o lo lees aqu√≠ de nuevo
	if isDevelopment {
		logLevel = logger.Info // Mostrar queries SQL en desarrollo
	}

	gormLogger := logger.New(
		// Usar log.New para asegurar la salida est√°ndar con prefijo si es necesario
		log.New(os.Stdout, "\r\n[GORM] ", log.LstdFlags),
		logger.Config{
			SlowThreshold: 200 * time.Millisecond, // Umbral para queries lentas (ajustable)
			LogLevel:      logLevel,               // Nivel de log (Silent, Error, Warn, Info)
			Colorful:      isDevelopment,          // Salida colorida solo en desarrollo
		},
	)
	log.Printf("‚öôÔ∏è Logger de GORM configurado a nivel: %v\n", logLevel)

	// --- Conexi√≥n GORM ---
	// [‚úÖ BUENA PR√ÅCTICA] Usar gorm.Open con el driver espec√≠fico y la configuraci√≥n.
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{
		Logger: gormLogger, // Aplicar el logger configurado
		// Podr√≠as a√±adir aqu√≠ otras configuraciones de GORM si las necesitas
		// PrepareStmt: true, // Podr√≠a mejorar rendimiento en algunos casos
	})

	if err != nil {
		// [‚úÖ BUENA PR√ÅCTICA] Envolver el error para dar contexto claro.
		return nil, fmt.Errorf("‚ùå error al conectar a la base de datos con GORM: %w", err)
	}

	log.Println("‚úÖ Conexi√≥n GORM establecida exitosamente.")

	// [üî¥ CONFIRMACI√ìN IMPORTANTE]
	// ¬°NO DEBES LLAMAR A db.AutoMigrate() AQU√ç!
	// Las migraciones de esquema deben manejarse de forma expl√≠cita y controlada,
	// preferiblemente a trav√©s de un sistema/comando de migraci√≥n separado
	// (ej: migrate, goose, gorm-migrate, o scripts SQL manuales).
	// Hacerlo aqu√≠ acopla el inicio de la aplicaci√≥n con cambios de esquema,
	// lo cual es peligroso y poco flexible.

	// --- Configuraci√≥n del Pool de Conexiones ---
	// [‚úÖ BUENA PR√ÅCTICA] Configurar el pool subyacente de sql.DB para eficiencia.
	sqlDB, err := db.DB()
	if err != nil {
		// Si GORM no puede devolver el *sql.DB subyacente, algo va muy mal.
		// Podr√≠as cerrar la conexi√≥n gorm aqu√≠ si fuera necesario: db.Close() ?
		return nil, fmt.Errorf("‚ùå error cr√≠tico al obtener el pool sql.DB de GORM: %w", err)
	}

	// Valores de ejemplo, aj√∫stalos seg√∫n tus necesidades y pruebas de carga
	sqlDB.SetMaxIdleConns(10)           // Conexiones inactivas m√°ximas
	sqlDB.SetMaxOpenConns(50)          // Conexiones abiertas m√°ximas totales
	sqlDB.SetConnMaxLifetime(time.Hour) // Tiempo m√°ximo de vida de una conexi√≥n
	sqlDB.SetConnMaxIdleTime(10 * time.Minute) // Tiempo m√°ximo inactiva antes de cerrarse
	log.Printf("‚öôÔ∏è Pool de conexiones SQL configurado: MaxOpen=%d, MaxIdle=%d, MaxLifetime=%v, MaxIdleTime=%v\n",
		50, 10, time.Hour, 10*time.Minute)

	// [‚úÖ BUENA PR√ÅCTICA] Hacer un Ping para verificar la conexi√≥n real antes de devolverla.
	err = sqlDB.Ping()
	if err != nil {
		// Si el ping falla, cierra el pool antes de devolver el error.
		sqlDB.Close()
		return nil, fmt.Errorf("‚ùå la base de datos no respondi√≥ al ping inicial: %w", err)
	}
	log.Println("‚úÖ Ping a la base de datos exitoso.")


	// Devuelve la instancia de GORM lista para ser usada por los repositorios.
	return db, nil
}