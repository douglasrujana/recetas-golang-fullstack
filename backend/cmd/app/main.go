// backend/cmd/api/main.go (Enfoque: Solo Categor√≠as)
package main

import (
	"fmt"
	"log"
	"net/http"

	"backend/internal/config"   // Configuraci√≥n
	"backend/internal/database"  // Conexi√≥n BD
	// "backend/internal/domain" // Puede no ser necesario importar aqu√≠ directamente
	"backend/internal/handler"   // Handlers (el paquete)
	// "backend/internal/repository" // Puede no ser necesario importar aqu√≠ directamente
	"backend/internal/repository/mysql" // Implementaci√≥n MySQL del Repositorio
	"backend/internal/service"   // Servicios (el paquete)

	"github.com/gin-gonic/gin"
	// Aseg√∫rate de que el driver MySQL est√© importado (usualmente en database.go)
	// _ "github.com/go-sql-driver/mysql"
)

func main() {
	log.Println("üöÄ Iniciando aplicaci√≥n (Enfoque: Solo Categor√≠as)...")

	// --- 1. Carga de Configuraci√≥n ---
	cfg, err := config.LoadConfig(".")
	if err != nil {
		log.Fatalf("‚ùå Error cargando config: %v", err)
	}
	fmt.Println("‚úÖ Configuraci√≥n cargada.")
	fmt.Println("   - Entorno:", cfg.AppEnv)
	fmt.Println("   - Puerto Servidor:", cfg.Server.Port)
	// ... otros logs de config seguros ...

	// --- 2. Inicializaci√≥n de Base de Datos ---
	dbInstance, err := database.ConnectDB(cfg.Database)
	if err != nil {
		log.Fatalf("‚ùå Error inicializando BD: %v", err)
	}
	log.Println("‚úÖ Conexi√≥n a base de datos establecida.")

	// --- 3. Inyecci√≥n de Dependencias (Solo Categor√≠as) ---
	log.Println("üèóÔ∏è  Inicializando dependencias (Solo Categor√≠as)...")

	// [REPOSITORIOS]
	categoriaRepo := mysql.NewCategoriaRepository(dbInstance)
	log.Println("   - Repositorio Categor√≠as inicializado.")

	// [SERVICIOS]
	categoriaService := service.NewCategoriaService(categoriaRepo)
	log.Println("   - Servicio Categor√≠as inicializado.")

	// [HANDLERS]
	categoriaHandler := handler.NewCategoriaHandler(categoriaService)
	log.Println("   - Handler Categor√≠as inicializado.")
	log.Println("‚úÖ Dependencias de Categor√≠as inicializadas.")


	// --- 4. Inicializaci√≥n del Router Gin ---
	if cfg.AppEnv == "production" {
		gin.SetMode(gin.ReleaseMode)
	}
	router := gin.Default()
	log.Printf("‚úÖ Router Gin inicializado en modo: %s.\n", gin.Mode())


	// --- 5. Configuraci√≥n de Rutas (Solo Categor√≠as) ---
	// Pasamos SOLO el handler de categor√≠as.
	handler.RegisterRoutes(router, categoriaHandler)
	log.Println("‚úÖ Rutas de Categor√≠as registradas.")

	// [Rutas Base / No API]
	router.Static("/public", "./public")
	router.Static("/uploads", "./uploads") // Dejar por ahora, puede ser necesario
	router.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{"error": "Ruta no encontrada"})
	})
	router.GET("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"message": "‚úÖ API Recetas Go Funcionando! (Enfoque Categor√≠as)"})
	})
	log.Println("‚úÖ Rutas adicionales configuradas.")


	// --- 6. Arranque del Servidor ---
	serverAddr := fmt.Sprintf(":%d", cfg.Server.Port)
	fmt.Printf("üöÄ Servidor (Categor√≠as) escuchando en http://localhost%s\n", serverAddr)
	if err := router.Run(serverAddr); err != nil {
		log.Fatalf("‚ùå Error al iniciar el servidor Gin: %v", err)
	}
}